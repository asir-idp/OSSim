package edu.upc.fib.ossim.template.view;

import java.awt.BorderLayout;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.SpringLayout;

import edu.upc.fib.ossim.AppSession;
import edu.upc.fib.ossim.template.Presenter;
import edu.upc.fib.ossim.utils.Functions;
import edu.upc.fib.ossim.utils.Translation;


/**
 * Application Panel template (Template Pattern). 
 * Panel template manage common application simulations panel's behavior. 
 * Panels implementing that template are filled with concrete painters. 
 * All events generated by this panel are managed through a Presenter's instance (Model-View-Presenter Pattern). 
 * A tool bar is created at panel's top position with shortcuts to 
 * main simulations actions: open file, save file, add item (optional), show settings, show data and statistics (optional) and time controls (optional). <br/>     
 * Besides an algorithm description label is added under that tool bar  
 *  
 * @author Alex Macia
 */
public abstract class PanelTemplate extends JPanel { 
	private static final long serialVersionUID = 1L;

	private JButton openFile;
	private JButton saveFile;
	private JButton addItem;
	private JButton showsettings;
	private JButton viewData;
	private String keyLabelAdd;
	private String keyHelp;
	private boolean time;
	private boolean info;
	private JLabel salgorithm;
	protected JPanel header;
	protected JPanel pane;
	protected SpringLayout layout;
	
	protected Presenter presenter;

	/**
	 * Constructs PanelTemplate adding all painters and a tool bar
	 * 
	 * @param presenter		event manager
	 * @param keyLabelAdd	reference to add label string into bundle file 
	 * @param keyHelp		reference to help  
	 * @param time			true adds time control at tools bar 
	 * @param info			true adds info button at tools bar
	 * 
	 * @see #initSpecificLayout()
	 */
	public PanelTemplate(Presenter presenter, String keyLabelAdd, String keyHelp, boolean time, boolean info) { 
		super();
		this.presenter = presenter;
		this.keyLabelAdd = keyLabelAdd;
		this.keyHelp = keyHelp;
		this.time = time;
		this.info = info;
		this.setOpaque(true);
		initLayout();
	}

	private void initLayout() {
		this.setLayout(new BorderLayout());

		add(menuPanel(), BorderLayout.PAGE_START);
		
		pane = new JPanel();
		layout = new SpringLayout();
		pane.setLayout(layout);
		
		salgorithm = new JLabel(presenter.getAlgorithmInfo());
		JLabel help = presenter.createHelp(keyHelp);

		header = new JPanel();
		header.setLayout(new BoxLayout(header, BoxLayout.LINE_AXIS));
		header.add(salgorithm);
		header.add(Box.createHorizontalGlue());
		header.add(help);
		layout.putConstraint(SpringLayout.WEST, header, 10, SpringLayout.WEST, this);
		layout.putConstraint(SpringLayout.NORTH, header, 10, SpringLayout.NORTH, this);
		
		pane.add(header);
		
		initSpecificLayout();

		add(pane, BorderLayout.CENTER);
	}
	
	/**
	 * Abstract method to implement specific panel layout, concrete painters added to this panel 
	 */
	public abstract void initSpecificLayout();

	private JToolBar menuPanel() {
		
		JToolBar menu = new JToolBar();
		
		openFile = new JButton(Functions.getInstance().createImageIcon("open.png"));
		openFile.setToolTipText(Translation.getInstance().getLabel("all_12"));
		openFile.setActionCommand("open");
		openFile.addActionListener(presenter);
		if (!AppSession.getInstance().getApp().allowOpenSave()) openFile.setEnabled(false);
		menu.add(openFile);

		saveFile = new JButton(Functions.getInstance().createImageIcon("save.png"));
		saveFile.setToolTipText(Translation.getInstance().getLabel("all_13"));
		saveFile.setActionCommand("save");
		saveFile.addActionListener(presenter);
		if (!AppSession.getInstance().getApp().allowOpenSave()) saveFile.setEnabled(false);
		menu.add(saveFile);

		showsettings = new JButton(Functions.getInstance().createImageIcon("tools.png"));
		showsettings.setToolTipText(Translation.getInstance().getLabel("all_10"));
		showsettings.setActionCommand("panel_st");
		showsettings.addActionListener(presenter);
		menu.add(showsettings);

		if (keyLabelAdd != null) {
			addItem = new JButton(Functions.getInstance().createImageIcon("add.png"));
			addItem.setToolTipText(Translation.getInstance().getLabel(keyLabelAdd));
			addItem.setActionCommand("panel_add");
			addItem.addActionListener(presenter);
			menu.add(addItem);
		}

		if (info) {
			viewData = new JButton(Functions.getInstance().createImageIcon("infodata.png"));
			viewData.setToolTipText(Translation.getInstance().getLabel("all_11"));
			viewData.setActionCommand("panel_vd");
			viewData.addActionListener(presenter);
			menu.add(viewData);
		}
		
		if (time) {
			menu.addSeparator();
			menu.add(presenter.getTimecontrols());
		}
		
		return menu;
	}

	/**
	 * Change algorithm information label
	 * 
	 * @param s	algorithm information string
	 */
	public void setLabel(String s) {
		salgorithm.setText(s);
	}
	
	/**
	 * Translates labels and tool tips to current session language 
	 */
	public void updateLabels() {
		// Update self labels
		openFile.setToolTipText(Translation.getInstance().getLabel("all_12"));
		saveFile.setToolTipText(Translation.getInstance().getLabel("all_13"));
		if (keyLabelAdd != null) addItem.setToolTipText(Translation.getInstance().getLabel(keyLabelAdd));
		showsettings.setToolTipText(Translation.getInstance().getLabel("all_10"));
		if (info) viewData.setToolTipText(Translation.getInstance().getLabel("all_11"));
		setLabel(presenter.getAlgorithmInfo());
	}
	
	/**
	 * Disables tool bar buttons at simulation run time
	 */
	public void disableRunning(boolean b) {
		openFile.setEnabled(!b);
		saveFile.setEnabled(!b);
		showsettings.setEnabled(!b);
		if (keyLabelAdd != null) addItem.setEnabled(!b);
	}
} 
